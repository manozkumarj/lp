* Dart is the main programming language to develop cross platform mobile applications using Flutter framework.
* Dart is a 'static & compiled programming language'
	Static programming language -> Means once we define a variable a string value then it can't be modified in future.
	But we have 'dynamic' type, with that we can do

* Dart supports 2 types of compilations
	1) AOT -> Ahead Of Time
	2) JIT -> Just In Time


* We can run a dart file with below command
	dart filename.dart

* Every Dart program start with a 'void main()' function, example is below
void main(){
	var firstName = 'Manoj';
	String lastName = 'Kumar';

	print(firstName + ' ' + lastName);
}

* Dart supports Type Inference and statically type define

* All the core functions || features are built-in 'dart:core' package, we can import it as below
import 'dart:core';

Note: We no need to import 'dart:core' package explicitly, It will be auto-imported in every Dart file

* Basic 'io' package is below
import 'dart:io';

main(){
	stdout.writeln("What is your name: ?");
	Sting name = stdin.readLineSync();
	print("My name is $name"); // $name is called as String Intrpolation
}


* We can use 'assert()' to compare values, example is below
var one = int.parse('1');
assert(one == 1); ==> true

* We can use 'const' keyword to make a variable Constant

* If we define a variable and no values is assigned to it, then by deault the value will be 'null'.

* 


Note: Dart is a Object Oriented Language, that means everything is an object
****************************************** VS Code Extensions ******************************************
* Dart by Dart Code

******************************************* Packages *************************************************
* import 'dart:core';
* import 'dart:io'; // For input & output operations
* 

****************************************** Comments **************************************************
// In-Line comment

/*
Block comment
Multiple line of comment
*/

/// Documentation

******************************************* Data Types *************************************************
* int
* double
* string
* bool
* dynamic --> With this type we can change the data type at run time

* const aConstNum = 0;

* r'In a raw string, not even \n gets a special treatment' --> This is 'RAW' string
* We can print multi line using ''' OR """ quotes






Type conversion:
-------------------------------------------------------
* int.parse
* double.parse
* 1.toString(); ==> '1'
* 3.14687.toStringAsFixed(2); ==> '3.14'

Note: We can check the type of a variable as below
void main(){
	var x = 100;
	if(x is int){
		print('Integer');
	}
}

Note: We can know the type of a variable with 'runtimeType' statement, as below
print( variableName.runtimeType);

****************************************** Collections ******************************************
* We've 3 types
	1) List // is nothing but Array
	2) Set
	3) Map

* List random = ['Manoj', 'Mahesh', 10, 5.2];
List<String> names = ['Manoj', 'Mahesh'];

names[1] = 'Ravi';
for (var n in names){
	pring(n);
}

Note: By default 'List' is mutable, which means we can change the items. To make it immutable do as below
List<String> names = const ['Manoj', 'Mahesh'];

* To clone a List, as below
var names2 = [...names];

* SET - It's a collection of unique items, example is below
var haloenes = {'fluorine', 'chlorine'}


* MAP - is nothing but object and a dictionary in Python
var gifts = {'first': 'Mango', 'second': 'jack Fruit'}


****************************************** Functions ************************************************
* vaoid main() {
	showOutput(square(2));
	showOutput(square(2.5));
}

dynamic square(var num) => num * num;

void showOutput(msg){
	print(msg);
}

* There are 2 types of parameters
	1) Positioned parameters/arguments
	2) Named paramters/arguments

1) Positioned parameters/arguments:
void main(){
	print(sum(2, 2));
}

dynamic sum(var num1, var num2) => num1 + num2;

2) Positioned parameters/arguments:
void main(){
	print(sum(num2: 2, num1: 2));
}

dynamic sum({var num1, var num2}) => num1 + num2;

Note: Named parameters are optional parameters
void main(){
	print(sum(10));
	print(sum(10, num2: 2));
}

dynamic sum(var num1, {var num2}) => num1 + (num2 ?? 0);
** The above line can also be re-written as
dynamic sum(var num1, {var num2=0}) => num1 + num2;

* Optional parameters
dynamic sum(var num1, [var num2]) => num1 + (num2 ?? 0);

******************************************* Operators *************************************************
* Relational
==, !=, >=, <=, <, >

* Unary
++num;
num++;
--num;
num--;
num += 1;
num -= 1;
num *= 2;

* Logical
if(num > 200 && num < 203)
if(num > 200 || num < 203)

* Null Aware Operator
(?.), (??), (??=)

-> (?.), (??) examples are below
class Num{
	int num = 10;
}

main() {
	var n = Num();
	int number;

	if(n != null){
		number = n.num;
	}

	// Above 3 lines can also be written as below
	// number = n?.num;

	if(n != null){
		number = n.num;
	}else{
		number = 0;
	}

	// Above 5 lines can also be written as below
	// number = n?.num ?? 0;

	print(number);
}


-> (??=) example is below
void main(){
	int number;
	print(number ??= 100);
}


* Terinory Operator
void main(){
	int x = 100;
	var result = x % 2 == 0 ? 'Even' : 'Odd';
	print(result);
}


******************************************* Loops *************************************************
* Standard for loop
* for in loop
* forEach // It's a higher-order method
* while loop
* do while loop


Break & Continue statements
void main(){
	for (var i = 0; i < 10; ++i){
		if(i > 5) break;
		print("Number is: $i");
	}
}

void main(){
	for (var i = 0; i < 10; ++i){
		if(i % 2 == 0) continue;
		print("Odd: $i");
	}
}


******************************************* OOPs *************************************************
* A class is a blue print of an object
* class example is below
class Person{
	String name;
	int age;

	// Below one is Default Constructor
	Person(String name, [int age = 18]){
		this.name = name;
		this.age = age;
	}

	// above Default constructor also be written as
	// Person(this.name, [this.age = 18]);

	// Below one is called as names constructor
	Person.guest(){
		name = 'Mahesh';
		age = 26;
	}

	void showOutput(){
		print(name);
		print(age);
	}
}

void main(){
	Person person1 = Person('Manoj');
	// person1.name = 'Manoj';
	// person1.age = 28;
	person1.showOutput();

	var person2 = Person.guest();
	person2.showOutput();
}


* final, static, const
class X{
	final name;
	static const int age = 10;

	X(this.name);
}

main(){
	var x = X('jack');
	print(x.name); ==> jack
	print(x.age); ==> gives error since 'age' is prefixed with 'static'
	print(X.age); ==> 10
}

Note: variables which are prefixed with 'final' key can't be changed
Note: variables which are prefixed with 'final' key can only be changed in runtime, i.e., in constructor

* variables which are prefixed with 'static' key are called as 'class property', all other properties are called as 'object.properties'.

* Class properties can't be accessed with object

* Inheritence example is below
class Vehicle{
	String model;
	int year;

	Vehicle(this.model, this.year){
		print(this.model);
		print(this.year);
	}

	void showOutput(){
		print(model);
		print(year);
	}
}

class Car extends Vehicle{
	double price;

	Car(String model, int year, this.price) : super(model, year);

	void showOutput(){
		super.showOutput();
		print(this.price);
	}
}

void main(){
	var car1 = Car('Accord', 2014, 150000);
	car1.showOutput();
}

* We need to use '@override' annotation while overriding the method

* Exception handling
int mustGreaterThanero(int val){
	if(val <= 0){
		throw Exception("Value must be greater than zero");
	}
	return val;
}

void letVerifyTheValue(var val){
	var valueVerification;

	try{
		valueVerification = mustGreaterThanero(val);
	}
	catch(e){
		print(e);
	}
	finally{
		if(valueVerification == null){
			print("value is not accepted");
		}
		else{
			print("value is verified $valueVerification");
		}
	}
}

void main(){
	letVerifyTheValue(10);
	letVerifyTheValue(0);
}

****************************************** Dart websites ******************************************
* https://dart.dev/
* https://dartpad.dartlang.org/0ca5b334ec413c084575f575e0240501