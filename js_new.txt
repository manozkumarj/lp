Short & Sweet:
--------------------------------------------------------------------------
* var -> is function level
* let -> is block level
* const -> is block level

function sample(){
	for (let i = 0; i < 5; i++){
		console.log(i);
	}
		console.log(i);
}

* Defining an object
const person = {
	name: 'Manoj',
	walk: function() {},
	talk() {}
};

Obeject functions can be accessible as below
person.talk();

* const person = {
	name: 'Manoj',
	walk: function() {
		console.log(this);
	},
	talk() {}
};

const walk = person.walk;
walk();  // Output will be 'undefined'

* Arrow function Ex:
const square = function (number){
	return number * number;
}

the above function can be written with arrow function as below

const square = number => number * number;


* Spread operator Ex:
const first = [a, b, c];
const second = [d, e, f];

const combine = first.concat(second);  // Old way
const combine = [...first, '1', ...second, '2'];  // New way

* Cloning an array
const clone = [...first];

NOTE: Spread operator & cloning both works same way for arrays and objects

* Object destructuring Ex:
const person = {
	name: "Manoj",
	city: "Hyderabad",
	state: "TG"
};

const {name, city, state} = person;
const {name: n} = person;

* In Javascript unlike other proramming languages we can apply the logical and (&&) between non-boolean values. Below two are examples
	-> conole.log(true && "hi");  // returns "hi"
	-> conole.log(true && "hi" && 1);  // returns 1
* An empty string is considered 'falsy'
* In javascript number zero [0] is considered 'falsy'
* We can use all DOM events in React. (CamelCase  naming convention)
Ex: onClick, onDoubleCick, onKeyDown, etc.,

* We should not use parentheses while calling a event related function.
* We can not change state properties directly. We have to explicitly tell react that what is changed.

* We should create a event function as below
  handleIncrement = () => {
    this.setState({ count: this.state.count + 1 });
  };

* 












* 'filter' method is used to filter an array and it does not change the original array.
Ex: const jobs = [
		{ id: 1, isActive: true },
		{ id: 2, isActive: false },
		{ id: 3, isActive: true }
	];

	const activeJobs = jobs.filter( job => job.isActive);


* 'map' method is used to modify/transform an array and it return new array.
Ex: const colors = ['red', 'green', 'blue'];
	const list = colors.map(color => `<li> ${color} </li>`);
	console.log(items);

* 'slice', 'map' method return new array.
* 'splice' modifies original array.

