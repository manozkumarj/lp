*********************************** Useful commands **************************************************
* npm i create-react-app (Then) create-react-app [APP-NAME]
	(OR)
  npx create-react-app [APP-NAME]

  	Note:: Project name should contain lowercase alphabets only with '-' seperation

* npm start
	(By default, a ReactJS app runs on port 3000. An Express.js app also runs on the same port 3000)
* npm build || npm run build





******************************************************************************************************************************************* IMP Points *****************************************************
* difference npx and npm
	-> npm is a tool mainly used to install packages.
	-> npx is a tool to execute packages.
	What does it means? That if you want to execute a package without installing it on your computer and then launch it you can use npx directly.
	Speaking of react , create-react-app is an utility to bootstrap a react project: if you use it with npx ( npx create-react-app my-app ) you will have your my-app project in place without the need to install create-react-app itself ( which will need another passage: npm install create-react-app and then create-react-app my-app)

* We automatically get 'props' in 'class based components' & we can acess then as 'this.props'.
* We can access dynamic parameters from URL as below
	componentDidMount(){
		console.log(this.props);
		let id = this.props.match.params.post_id;
	}
* 'contextType' will be used in 'Class component' but not in 'Functional component'.
* We can consume 'context' in two ways
	1) By using 'this.context'
	2) 'Context consumer'
* 'this.context' will holds the data of the provider which is imported by that class.
* We can consume 'context' with 2nd way which is 'Context consumer' way will work in both 'Class component' & 'Functional component'.
* We can consume multiple contexts in one component with Context consumer' way.
* 

*** Hooks ***
* Hooks are special functions. They allow us to do additional things in 'Functional components'
* Means if we wanna use 'state' then don't need to use 'class component' anymore.
-> useState() - uses state within a functional component
-> useEffect() - Runs code when a component renders or re-renders
-> useContext() - Used to consume context in a functional component. We can use as many times as we want to consume different contexts.

* We can use 'useEffect()' as many times as we want.








******************************************************************************************************
*********************************** Imports & shortcuts **********************************************
* imrc
* imr
* cc
* fc


* import React, { Component, createContext, useEffect, useState, useReducer } from 'react';
* import { BrowserRouter, Route, Link, NavLink, Switch, withRouter } from 'react-router-dom';


* Packages which need to be install inorder to use them
	-> react-router-dom


******************************************************************************************************
****************************************** Redux *****************************************************
* Central data store for all app data.
* Any component can access data from it.
* Makes state management easy.
* 










******************************************************************************************************
************************************* IMP Points *****************************************************
* clss => clssName
* for => htmlFor
* We automatically get 'props' in 'class based components' & we can acess then as 'this.props'.
* We can access dynamic parameters from URL as below
	componentDidMount(){
		console.log(this.props);
		let id = this.props.match.params.post_id;
	}

* If we want to create a function inside of 'Functional component' then we need to use 'const' keyword
in front of function name.
Ex: const Header = props => {
		const funcName(){
			// code
		}
		return (<> Some JSX code </>);
	}

* If you use 'useEffect()' method inside of 'Functional component' then don't forget add 
"// eslint-disable-next-line" just above the close curly braces of 'useEffect()' method.

* 








******************************************************************************************************
******************************************* Routing Example ******************************************
import React, { Component } from 'react';
import { BrowserRouter, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import About from './components/About';
import Contact from './components/Contact';

class App extends Component {
	render(){
		return (
			<BrowserRouter>
				<div className='App'>
					<Navbar />
					<Switch>
					<Route exact path='/' component={Home} />
					<Route exact path='/about' component={About} />
					<Route exact path='/contact' component={Contact} />
					</Switch>
				</div>
			</BrowserRouter>
		);
	}
}

export default App;

   -------------------------------------------------------------

import { Link, NavLink, withRouter } from 'react-router-dom';

const Navbar = (props) => {

	console.log(props);
	setTimeout(() => {
		props.history.push('/about');
	}, 2000);

	return (
		<ul>
			<li><Link to='/'>Home</Link>
			<li><Link to='/about'>About</Link>
			<li><Link to='/contact'>Contact</Link>
		</ul>
	);
}

export default withRouter(Navbar);



* If we use '<NavLink>' instead of '<Link>' tag, '<NavLink>' adds a class named 'active'.
* React router automatically applies some properties(Ex; history) to the 'props' by default on 
every route.

* But we can add those default props with 'Higher order component' which is 'withRouter'
	
******************************************************************************************************
*********************************** Points to be noted ***********************************************
* Only 'Class based components' contain 'Life-cycle' hooks but not 'Functional components'
* 





******************************************************************************************************
***************************************** Useful Links ***********************************************
* https://tylermcginnis.com/react-router-pass-props-to-components/
* 



