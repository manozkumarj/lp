*********************************** Useful commands **************************************************
* npm i create-react-app (Then) create-react-app [APP-NAME]
	(OR)
  npx create-react-app [APP-NAME]

  	Note:: Project name should contain lowercase alphabets only with '-' seperation

  	Note:: 'npx' allows us to use 'create-react-app' without installing it first.

* npm start
	(By default, a ReactJS app runs on port 3000. An Express.js app also runs on the same port 3000)
* npm build || npm run build





******************************************************************************************************************************************* IMP Points *****************************************************
* difference B/W npx and npm
	-> npm is a tool mainly used to install packages.
	-> npx is a tool to execute packages.
	What does it mean? That if you want to execute a package without installing it on your computer and then launch it you can use npx directly.
	Speaking of react , create-react-app is an utility to bootstrap a react project: if you use it with npx ( npx create-react-app my-app ) you will have your my-app project in place without the need to install create-react-app itself ( which will need another passage: npm install create-react-app and then create-react-app my-app)

* We automatically get 'props' in 'class based components' & we can acess then as 'this.props'.
* Never forget to use 'PropTypes' & 'defaultProps'
* We can access dynamic parameters from URL as below
	componentDidMount(){
		console.log(this.props);
		let id = this.props.match.params.post_id;
	}
* 'contextType' will be used in 'Class component' but not in 'Functional component'.
* We can consume 'context' in two ways
	1) By using 'this.context'
	2) 'Context consumer'
* 'this.context' will holds the data of the provider which is imported by that class.
* We can consume 'context' with 2nd way which is 'Context consumer' way will work in both 'Class component' & 'Functional component'.
* We can consume multiple contexts in one component with 'Context consumer' way.

* Before going to create a component first we need to think whether that component needs 'state' or not. If that component doesn't need 'state' then it is better to go for "Functional component" otherwise "Class based component"

*** Hooks ***
* Hooks are special functions. They allow us to do additional things in 'Functional components'
* Means if we wanna use 'state' then don't need to use 'class component' anymore.
-> useState() - uses state within a functional component
-> useEffect() - Runs code when a component renders or re-renders
-> useContext() - Used to consume context in a functional component. We can use as many times as we want to consume different contexts.

* We can use 'useEffect()' as many times as we want.


*** Usage of Context with Reducer ***
* First we need to import "createContext, useReducer" in 'context' file.
* export const BookContext = createContext();
* const [books, dispatch] = useReducer(bookReducer, [], () => {
    const localData = localStorage.getItem("books");
    return localData ? JSON.parse(localData) : [];
  });
* return (
    <BookContext.Provider value={{ books, dispatch }}>
      {props.children}
    </BookContext.Provider>
  );

* In 'reducer' file
import uuid from "uuid/v4";
export const bookReducer = (state, action) => {
  switch (action.type) {
    case "ADD_BOOK":
      return [
        ...state,
        {
          title: action.book.title,
          author: action.book.author,
          id: uuid()
        }
      ];
    case "REMOVE_BOOK":
      return state.filter(book => book.id !== action.id);
    default:
      return state;
  }
};


* Refs: Refs are a function provided by React to access the DOM element and the React element that you might have created on your own. They are used in cases where we want to change the value of a child component, without making use of props and all.


******************************************************************************************************
*************************************** Sample RXJS **************************************************
-> <span className={{'badge' + (type === 'professional' ? 'badge-success' : 'badge-primary')}}>
	{type}
	</span>

-> <ul>
	{email && (<li>
		<i> {email} </i>
	</li>)}

-> 


******************************************************************************************************
*********************************** Imports & shortcuts **********************************************
* imrc
* imr
* cc
* fc
* rfc


* import React, { Component, createContext, useEffect, useContext, useState, useReducer, useRef } from 'react';
* import { BrowserRouter as Router, Route, Link, NavLink, Switch, withRouter } from 'react-router-dom';
* import { createStore, combineReducers, applyMiddleware, compose } from 'redux';
	-> const store = createStore();
* import { Provider } from 'react-redux';
* import { connect } from 'react-redux'; // 'connect' is a higher-order component
* import thunk from 'redux-thunk';
* import { reduxFirestore, getFirestore } from "redux-firestore";
* import { reactReduxFirebase, getFirebase } from "react-redux-firebase";
* import PropTypes from "prop-types";
* import { CSSTransition, TransitionGroup } from "react-transition-group";


* Packages which need to be installed inorder to use them
	-> react-router-dom
	-> redux
	-> react-redux
	-> redux-thunk

* 'react-redux's 'connect' function takes two parameters, 1) mapStateToProps 2) mapDispatchToProps
	If first parameter(mapStateToProps) not available to pass then we can pass as 'null'
		Ex: export default connect(null, mapDispatchToProps)(CreateProject);

* Redux thunk is a middleware, it runs between 'Dispatch Action' & 'Reducer'. It allows us to perform Asynchronous task in our 'Action Creators'.
	-> Thunk:
		-> Halts the dispatch
		-> Performs async request
		-> Resumes dispatch

* 


******************************************************************************************************
****************************************** Redux *****************************************************
* Central data store for all app data.
* Any component can access data from it.
* Makes state management easy.
* 


Point by point ------------------------------------------------------------------------
* We need two packages in order to use 'Redux Store' in our App. Those two packages are 
	-> 'redux' = It's a 'redux store' library to store data.
	-> 'react-redux' = It's a library which helps us to connect to our Redux store to React app. It's 		like a glue-layer B/W 'Redux' & our App.
* To use/access 'redux' across all component in our app, we need to wrap our main App tag with redux provider as below.

Inside of 'index.js' file 
	import React from 'react';
	import ReactDOM from 'react-dom';
	import './index.css';
	import App from './App';
	import registerServiceWorker from './registerServiceWorker';
	import { createStore } from 'redux'
	import { Provider } from 'react-redux'
	import rootReducer from './reducers/rootReducer'

	const store = createStore(rootReducer);

	ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));
	registerServiceWorker();

* Let's say we create 'rootReducer.js' file & contains below content
	const initState = {
	  posts: [
	    {id: '1', title: 'Squirtle Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},
	    {id: '2', title: 'Charmander Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},
	    {id: '3', title: 'a Helix Fossil was Found', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'}
	  ]
	}

	const rootReducer = (state = initState, action) => {
	  console.log(action);
	  if(action.type === 'DELETE_POST'){
	   let newPosts = state.posts.filter(post => {
	     return post.id !== action.id
	   });
	   return {
	     ...state,
	     posts: newPosts
	   }
	  }
	  return state;
	}

	export default rootReducer

* And we want to use above redux store data in a page where we display all posts, it will be as below
	import React, { Component } from 'react'
	import { Link } from 'react-router-dom'
	import Pokeball from '../pokeball.png'
	import { connect } from 'react-redux'

	class Home extends Component {
	  render(){
	    const { posts } = this.props
	    const postList = posts.length ? (
	      posts.map(post => {
	        return (
	          <div className="post card" key={post.id}>
	            <img src={Pokeball} alt="A Pokeball" />
	            <div className="card-content">
	              <Link to={'/' + post.id}>
	                <span className="card-title red-text">{post.title}</span>
	              </Link>
	              <p>{post.body}</p>
	            </div>
	          </div>
	        )
	      })
	    ) : (
	      <div className="center">No posts to show</div>
	    );

	    return (
	      <div>
	        <div className="container home">
	          <h4 className="center">Home</h4>
	          {postList}
	        </div>
	      </div>
	    )
	  }
	}

	const mapStateToProps = (state) => {
	  return {
	    posts: state.posts
	  }
	}

	export default connect(mapStateToProps)(Home)

* And if we want to get only one posts from redux store data in another page, then...
	-> 'mapStateToProps' method takes 2nd parameter which is contains current component props
	const mapStateToProps = (state, ownProps) => {
	  let id = ownProps.match.params.post_id;
	  return {
	    post: state.posts.find(post => post.id === id)
	  }
	}

* To update the state of redux data, lets say we want to delete a post, then...
	const mapDispatchToProps = (dispatch) => {
	  return {
	    deletePost: (id) => dispatch(deletePost(id))
	  }
	}

	export default connect(mapStateToProps, mapDispatchToProps)(Post)

* 





******************************************************************************************************
****************************************** Packages *****************************************************
* redux = It's a library to store.
* react-redux = It's a library which helps us to connect to our Redux store to React app. It's like a glue-layer B/W 'Redux' & our App.

* redux-thunk = It's a package which help us to work with redux in async code.
* react-redux-firebase
* redux-firestore
* react-transition-group










******************************************************************************************************
************************************* IMP Points *****************************************************
* class => className
* for => htmlFor
* We automatically get 'props' in 'class based components' & we can acess then as 'this.props'.
* We can access dynamic parameters from URL as below
	componentDidMount(){
		console.log(this.props);
		let id = this.props.match.params.post_id;
	}

* If we want to create a function inside of 'Functional component' then we need to use 'const' keyword
in front of function name.
Ex: const Header = props => {
		const funcName(){
			// code
		}
		return (<> Some JSX code </>);
	}

* If you use 'useEffect()' method inside of 'Functional component' then don't forget add 
"// eslint-disable-next-line" just above the close curly braces of 'useEffect()' method.

* 








******************************************************************************************************
******************************************* Routing Example ******************************************
import React, { Component } from 'react';
import { BrowserRouter, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import About from './components/About';
import Contact from './components/Contact';
import PropTypes from 'prop-types';

class App extends Component {
	render(){
		return (
			<BrowserRouter>
				<div className='App'>
					<Navbar />
					<Switch>
					<Route exact path='/' component={Home} />
					<Route exact path='/about' component={About} />
					<Route exact path='/contact' component={Contact} />
					</Switch>
				</div>
			</BrowserRouter>
		);
	}
}

export default App;

   -------------------------------------------------------------

import { Link, NavLink, withRouter } from 'react-router-dom';

const Navbar = (props) => {

	console.log(props);
	setTimeout(() => {
		props.history.push('/about');
	}, 2000);

	return (
		<ul>
			<li><Link to='/'>Home</Link>
			<li><Link to='/about'>About</Link>
			<li><Link to='/contact'>Contact</Link>
		</ul>
	);
}

export default withRouter(Navbar);



* If we use '<NavLink>' instead of '<Link>' tag, '<NavLink>' adds a class named 'active'.
* React router automatically applies some properties(Ex; history) to the 'props' by default on 
every route.

* But we can add those default props with 'Higher order component' which is 'withRouter'
	
******************************************************************************************************
*********************************** Points to be noted ***********************************************
* Only 'Class based components' contain 'Life-cycle' hooks but not 'Functional components'
* 





******************************************************************************************************
***************************************** Useful Links ***********************************************
* https://tylermcginnis.com/react-router-pass-props-to-components/
* 








******************************************************************************************************
************************************** Interview things **********************************************
* Current React version?
* How to access 'props' in 'Class based ' & 'Functional' components?
* Explain 'Context API' & 'Redux'
* What are 'mapStateToProps' & 'mapDispatchToProps' functions?
* What are 'action creators'?
* What is 'Single State of Truth'?
* What is 'useRef' and explain it's usage?






