* Javascript is a "synchronous single threaded" language. It has one "call stack" and it can do onething at a time. This call stack is present in JS engine. All the JS code is executed inside of this call stack
********* https://www.youtube.com/watch?v=8zKuNo4ay8E

* Whenever we run a JS program, an "Global Execution context"(GEC) is created and it goes through 2 phases. "Memory creation phase" and "Code execition phase"

* Everything in Javascript happens inside an "Execution context" AKA "Variable environment".
"Execution context" has two components which are
  1) Memory component
  2) Code component
* "Execution context" goes through 2 phases
phase 1 -> Memory creation phase
phase 2 -> Code execition phase

* Call stack handles all the above operations perfectly. Call stack maintains the order of execution of execution contexts.
Call stack has many names, which are
  Exection context stack
  Program stack
  Control stack
  Runtime stack
  Machine stack

* Jaascript engine is very fast.

* Functions in Js behave very differently when compared to other languages. Each function is like a new "Execution context" area.

* What is the event loop in js?
The event loop is the secret behind JavaScript's asynchronous programming... The event queue is responsible for sending new functions to the track for processing. It follows the queue data structure to maintain the correct sequence in which all operations should be sent for execution.

* What is event loop in JavaScript with example?
JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.

* How does event loop work?
The Event Loop has one simple job — to monitor the Call Stack and the Callback Queue. If the Call Stack is empty, the Event Loop will take the first event from the queue and will push it to the Call Stack.

Altogether -> The event loop is the secret behind JavaScript's asynchronous programming... The event queue is responsible for sending new functions to the track for processing. If the Call Stack is empty, the Event Loop will take the first event from the queue and will push it to the Call Stack.


* What is event bubbling and how is it different to event capturing?
  -> Event Bubbling − Whenever an event happens on an element, the event handlers will first run on it and then on its parent and finally all the way up to its other parent elements. 
  -> Event Capturing − It is the reverse of the event bubbling and here the event starts from the parent element and then to its child element.

* 

* 'var' and 'let' are both used for variable declaration in javascript but the difference between them is that 'var' is function scoped and 'let' is block scoped.

* A closure gives you access to an outer function's scope from an inner function.

* Both 'freeze' and 'seal' are used to create non extensible objects in JavaScript, but there are plenty of differences between them. Object.seal() allows changes to the existing properties of an object whereas Object.freeze() does not allow so. Object.freeze() makes an object immute to everything even little changes cannot be made. Object.seal() prevents from deletion of existing properties but cannot prevent them from external changes.

* The prototype is an object that is associated with every functions and objects by default in JavaScript, where function's prototype property is accessible and modifiable and object's prototype property (aka attribute) is not visible.
FMD --> https://www.tutorialsteacher.com/javascript/prototype-in-javascript

* Hoisting: In JavaScript, variable and function names can be used before declaring it. The JavaScript compiler moves all the declarations of variables and functions at the top so that there will not be any error. This is called hoisting.
Points to Remember :
	-> JavaScript compiler moves variables and function declaration to the top and this is called hoisting.
	-> Only variable declarations move to the top, not the initialization.
	-> Functions definition moves first before variables.
FMD --> https://www.tutorialsteacher.com/javascript/javascript-hoisting

Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.

Just like  var, let declarations are hoisted to the top. Unlike var which is initialized as undefined, the let keyword is not initialized. So if you try to use a let variable before declaration, you'll get a Reference Error.

Hoisting of const
Just like let, const declarations are hoisted to the top but are not initialized.

So just in case you missed the differences, here they are:
  -> var declarations are globally scoped or function scoped while let and const are block scoped.
  -> var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.
  -> They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized.
  -> While var and let can be declared without being initialized, const must be initialized during declaration.

* var, let, const
VAR: variables declared using VAR keyword can be re-declared & updated.
  var greeter = "hey hi";
  var times = 4;

  if (times > 3) {
      var greeter = "say Hello instead"; 
  }

  console.log(greeter) // "say Hello instead"

LET: variables declared using LET keyword can not be re-declared but updated.
  let greeting = "say Hi";
  let times = 4;

  if (times > 3) {
      let hello = "say Hello instead";
      console.log(hello);// "say Hello instead"
  }
  console.log(hello) // hello is not defined
  ******
  let greeting = "say Hi";
  let greeting = "say Hello instead"; // error: Identifier 'greeting' has already been declared
  ******
  let greeting = "say Hi";
  if (true) {
      let greeting = "say Hello instead";
      console.log(greeting); // "say Hello instead"
  }
  console.log(greeting); // "say Hi"

CONST: Like let declarations, const declarations can only be accessed within the block they were declared. const cannot be updated or re-declared. This means that the value of a variable declared with const remains the same within its scope. It cannot be updated or re-declared. So if we declare a variable with const, we can neither do this:

  const greeting = "say Hi";
  greeting = "say Hello instead";// error: Assignment to constant variable. 
  *******
  const greeting = "say Hi";
  const greeting = "say Hello instead";// error: Identifier 'greeting' has already been declared
  *******
  This behavior is somehow different when it comes to objects declared with const. While a const object cannot be updated, the properties of this objects can be updated. Therefore, if we declare a const object as this:
  const greeting = {
      message: "say Hi",
      times: 4
  }
  while we cannot do this:
  greeting = {
      words: "Hello",
      number: "five"
  } // error:  Assignment to constant variable.
  we can do this:
  greeting.message = "say Hello instead";







* Eval: eval() is a global function in JavaScript that evaluates a specified string as JavaScript code and executes it.
Ex: console.log(eval('2 + 2'));
// expected output: 4

console.log(eval(new String('2 + 2')));
// expected output: 2 + 2

console.log(eval('2 + 2') === eval('4'));
// expected output: true

console.log(eval('2 + 2') === eval(new String('2 + 2')));
// expected output: false



* Try - catch - finally
FMD --> https://www.tutorialsteacher.com/javascript/javascript-error-handling

* Scopes: FMD --> https://www.tutorialsteacher.com/javascript/scope-in-javascript

* Promise
A Promise handles a single event when an async operation completes or fails.

* Promise:
var promise = new Promise(function(resolve, reject) { 
    resolve('Geeks For Geeks'); 
}) 
  
	promise 
		.then(function(successMessage) { 
		   //success handler function is invoked 
		    console.log(successMessage); 
		}, function(errorMessage) { 
		    console.log(errorMessage); 
		});

* Unique properties from array of object
const data = [
  { group: 'A', name: 'SD' }, 
  { group: 'B', name: 'FI' }, 
  { group: 'A', name: 'MM' },
  { group: 'B', name: 'CO'}
];
const unique = [...new Set(data.map(item => item.group))]; // [ 'A', 'B']

* let number = 5;
let currentLoopIs = number;

let finalOutput = 1;

function doAction(getNumber) {
  if (currentLoopIs) {
    finalOutput = finalOutput * currentLoopIs;
    currentLoopIs = --getNumber;
    doAction(currentLoopIs);
  }
}

doAction(number);

console.log(finalOutput);


* let mainArray = [0, 1];
let loopCount = 10;

function doAction () {
  let one = mainArray[mainArray.length - 2];
  let two = mainArray[mainArray.length - 1];

  let add = one + two;

  mainArray.push(add);
};

for (let i = 0; i <= loopCount; i++) {
  doAction();
}

console.log(mainArray); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]



* Closure example
function Counter() {
    var counter = 0;

    function IncreaseCounter() {
        return counter += 1;
    };

    return IncreaseCounter;
}

var counter = Counter();
alert(counter()); // 1
alert(counter()); // 2
alert(counter()); // 3
alert(counter()); // 4

* With arrow functions there are no binding of this.

* Call invokes the function and allows you to pass in arguments one by one. Apply invokes the function and allows you to pass in arguments as an array. Bind returns a new function, allowing you to pass in a this array and any number of arguments.

Call: The call() method calls a function with a given 'this' value and arguments provided individually.
Syntax
call()
call(thisArg)
call(thisArg, arg1)
call(thisArg, arg1, arg2)
call(thisArg, arg1, ... , argN)
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call

apply():
The apply() method calls a function with a given 'this' value, and arguments provided as an array (or an array-like object).
apply(thisArg)
apply(thisArg, argsArray)

bind():
The bind() method creates a new function that, when called, has its 'this' keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.



* What is the difference between null and undefined in JavaScript?
In JavaScript, undefined means a variable has been declared but has not yet been assigned a value, such as:

var testVar;
alert(testVar); //shows undefined
alert(typeof testVar); //shows undefined
null is an assignment value. It can be assigned to a variable as a representation of no value:

var testVar = null;
alert(testVar); //shows null
alert(typeof testVar); //shows object
From the preceding examples, it is clear that undefined and null are two distinct types: undefined is a type itself (undefined) while null is an object.

null === undefined // false
null == undefined // true
null === null // true


* Difference for..in and for..of:
Both for..in and for..of are looping constructs which are used to iterate over data structures. The only difference between them is the entities they iterate over:

for..in iterates over all enumerable property keys of an object
for..of iterates over the values of an iterable object. Examples of iterable objects are arrays, strings, and NodeLists.

Example:
let arr = ['el1', 'el2', 'el3'];

arr.addedProp = 'arrProp';

// elKey are the property keys
for (let elKey in arr) {
  console.log(elKey);
}

// elValue are the property values
for (let elValue of arr) {
  console.log(elValue)
}


* Difference between foreach and map
map() returns a new array while . forEach() doesn't. That is why you see that difference in the output. . forEach() just operates on every value in the array.

* For loop: The JavaScript for loop is used to iterate through the array or the elements for a specified number of times.

* Difference between forEach and for loop in Javascript
For Loop: It is one of the original ways of iterating over an array. It is faster in performance.The break statement can be used to come out from the loop. 
  for (let i = 0; i < foodArray.length; i++) {
    if (foodArray[i].name === 'Pizza') {
      console.log('I LOVE PIZZA');
      break;
    }
  }

forEach Loop: It is a newer way with lesser code to iterate over an array. It is slower than the traditional loop in performance. The break statement cannot be used because of the callback function. forEach keeps the variable’s scope to the block.
  const num = 4;
  const arr = [0, 1, 2];

  arr.forEach(num => {
    console.log(num);
  });

  // Result:
  // 0
  // 1
  // 2
  console.log(num);

  // Result:
  // 4


* 



















* Excercises:
1) var output = (function(x) { delete x; return x; })(0);
output(); // Returns an error as 'output is not a function';
console.log(output); // Returns 0;

2) var x = 1;
var output = (function(x) { delete x; return x; })();
console.log(output); // Returns 1;

3) var trees = ["xyz", "xxxx", "test", "ryan", "apple"];
delete trees[3]; // Returns true
console.log(trees.length); // Returns 5


Coding challenges --> https://www.fullstacktutorials.com/interviews/javascript-coding-questions-answers-6.html
* Reverse a given string using JavaScript?
var str = "Full Stack Tutorials";
var output = str
  .split("")
  .reverse()
  .join("");
console.log(output);


* Find the sum of all elements/numbers of a given array?
  -> using array reduce() method
      var arr = [1, 2, 5, 10, 20];
      var sum = arr.reduce((a, i) => {
        return a + i;
      });
      console.log(sum); // 38

  -> using loops (e.g. - for loop)
      var arr = [1, 2, 5, 10, 20];
      var sum = 0;
      for (let i in arr) {
        sum += arr[i];
      }
      console.log(sum); // 38

* Reverse the order of the elements in an array:
  const fruits = ["Banana", "Orange", "Apple", "Mango"];
  fruits.reverse(); // ["Mango", "Apple", "Orange", "Banana"]
The reverse() method reverses the order of the elements in an array.
reverse() overwrites the original array.

* const number = undefined + 11;
if (number === NaN) {
  document.write("NaN");
} else if (number === 11) {
  document.write("11");
} else {
  document.write("other");
}

// other


* const number = null + 11; // 11

* JavaScript startsWith and endsWith?
let name = "Full Stack Tutorials, Latest Interview Questions and Answers!";

//startsWith
console.log(name.startsWith("Full")); // true
console.log(name.startsWith("full")); // false
console.log(name.startsWith("Tutorials")); // false
console.log(name.startsWith("Tutorials", 11)); // true

//endsWith
console.log(name.endsWith("Answers!")); // true
console.log(name.endsWith("answers!")); // false
Note:- Both startsWith & endsWith are case-sensitive.


* var a=3;
var b=a++;
var c=++a;
console.log(a,b,c); // 5 3 5

* function func1() {
  return {
    name: "Full Stack Tutorials",
  };
}
console.log(func1()); // {name: "Full Stack Tutorials"}


* function func2() {
  return;
  {
    name: "Full Stack Tutorials";
  }
}
console.log(func2()); // undefined 
Note: Reason:-
The reason for this has to do with the fact that semicolons are technically optional in JavaScript (although omitting them is generally really bad form).

As a result, when the line containing the return statement (with nothing else on the line) is encountered in func2(), a semicolon is automatically inserted immediately after the return statement.


* console.log(typeof undefined); // undefined
console.log(typeof null); // object
console.log(typeof NULL); // undefined
console.log(typeof typeof 1); // string


* How to convert an Object {} into an Array [] in JavaScript?
let obj = { id: "1", name: "Test User", age: "25", profession: "Developer" };

//Method 1: Convert the keys to Array using - Object.keys()
console.log(Object.keys(obj)); // ["id", "name", "age", "profession"]

// Method 2 Converts the Values to Array using - Object.values()
console.log(Object.values(obj)); // ["1", "Test User", "25", "Developer"]

// Method 3 Converts both keys and values using - Object.entries()
console.log(Object.entries(obj)); //[["id", "1"],["name", "Test User"],["age", "25"],["profession", "Developer"]]


* How to convert an Array [] to Object {} in JavaScript?
let arr = ["1", "Test User", "25", "Developer"];
let arr1 = [
  ["id", "1"],
  ["name", "Test User"],
  ["age", "25"],
  ["profession", "Developer"],
];

//Method 1: Using Object.assign() method
console.log(Object.assign({}, arr));
//{0: "1", 1: "Test User", 2: "25", 3: "Developer"}

// Method 2 Using Spread operator
console.log({ ...arr });
//{0: "1", 1: "Test User", 2: "25", 3: "Developer"}

// Method 3: Using Object.fromEntries() method
console.log(Object.fromEntries(arr1));
//{id: "1", name: "Test User", age: "25", profession: "Developer"}


* const a = { x: 1, y: 2 };
const b = a;
b.x = 3;
console.log(a); // { x: 3, y: 2 }
console.log(b); // { x: 3, y: 2 }

Reason: both the object are pointing to same reference.


* let a = 10;
var a = 20;
console.log(a); // SyntaxError: Identifier 'a' has already been declared

* Explain what a callback function is and provide a simple example
A callback function is a function that is passed to another function as an argument and is executed after some operation has been completed. Below is an example of a simple callback function that logs to the console after some operations have been completed.

  function modifyArray(arr, callback) {
    // do something to arr here
    arr.push(100);
    // then execute the callback function that was passed
    callback();
  }

  var arr = [1, 2, 3, 4, 5];

  modifyArray(arr, function() {
    console.log("array has been modified", arr);
  });


* Given a string, reverse each word in the sentence
For example "Welcome to this Javascript Guide!" should be become "emocleW ot siht tpircsavaJ !ediuG"
var string = "Welcome to this Javascript Guide!";

// Output becomes !ediuG tpircsavaJ siht ot emocleW
var reverseEntireSentence = reverseBySeparator(string, "");

// Output becomes emocleW ot siht tpircsavaJ !ediuG
var reverseEachWord = reverseBySeparator(reverseEntireSentence, " ");

function reverseBySeparator(string, separator) {
  return string.split(separator).reverse().join(separator);
}

* How to empty an array in JavaScript?

Method 1:
var arrayList =  ['a', 'b', 'c', 'd', 'e', 'f'];
arrayList = [];

Above code will set the variable arrayList to a new empty array. This is recommended if you don't have references to the original array arrayList anywhere else because It will actually create a new empty array. You should be careful with this way of empty the array, because if you have referenced this array from another variable, then the original reference array will remain unchanged, Only use this way if you have only referenced the array by its original variable arrayList.

var arrayList = ['a', 'b', 'c', 'd', 'e', 'f']; // Created array
var anotherArrayList = arrayList;  // Referenced arrayList by another variable
arrayList = []; // Empty the array
console.log(anotherArrayList); // Output ['a', 'b', 'c', 'd', 'e', 'f']

Method 2:
arrayList.length = 0;
Above code will clear the existing array by setting its length to 0. This way of empty the array also update all the reference variable which pointing to the original array. This way of empty the array is useful when you want to update all the another reference variable which pointing to arrayList.

For Instance:

var arrayList = ['a', 'b', 'c', 'd', 'e', 'f']; // Created array
var anotherArrayList = arrayList;  // Referenced arrayList by another variable
arrayList.length = 0; // Empty the array by setting length to 0
console.log(anotherArrayList); // Output []


* How would you check if a number is an integer?
A very simply way to check if a number is a decimal or integer is to see if there is a remainder left when you divide by 1.

function isInt(num) {
  return num % 1 === 0;
}

console.log(isInt(4)); // true
console.log(isInt(12.2)); // false
console.log(isInt(0.3)); // false



* Make this work
Question: duplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]
Answer: function duplicate(arr) {
  return arr.concat(arr);
}

duplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]


* FizzBuzz Challenge
Problem
Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5.

Answer
Check out this version of FizzBuzz:

for (let i = 1; i <= 100; i++) {
  let f = i % 3 == 0,
    b = i % 5 == 0;
  console.log(f ? (b ? 'FizzBuzz' : 'Fizz') : b ? 'Buzz' : i);
}

* Given two strings, return true if they are anagrams of one another
Problem
For example: Mary is an anagram of Army

Answer
var firstWord = "Mary";
var secondWord = "Army";

isAnagram(firstWord, secondWord); // true

function isAnagram(first, second) {
  // For case insensitivity, change both words to lowercase.
  var a = first.toLowerCase();
  var b = second.toLowerCase();

  // Sort the strings, and join the resulting array to a string. Compare the results
  a = a.split("").sort().join("");
  b = b.split("").sort().join("");

  return a === b;
}


* What will the following code output?
Problem
(function() {
  var a = b = 5;
})();

console.log(b);

Answer
The code above will output 5 even though it seems as if the variable was declared within a function and can't be accessed outside of it. This is because

var a = b = 5;
is interpreted the following way:

var a = b;
b = 5;
But 'b' is not declared anywhere in the function with var so it is set equal to 5 in the global scope.


* Write a function that would allow you to do this
Problem
multiply(5)(6);
Answer
You can create a closure to keep the value of a even after the inner function is returned. The inner function that is being returned is created within an outer function, making it a closure, and it has access to the variables within the outer function, in this case the variable a.

function multiply(a) {
  return function(b) {
    return a * b;
  }
}

multiply(5)(6); // 30


* javascript check if array contains value
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.includes("Mango")   // Returns true

* javascript check if object has property
const fruits = ["Banana", "Orange", "Apple", "Mango"];
1. hasOwnProperty() method: 
fruits.includes("Mango")   // Returns true

2. in operator: 
'name' in hero;     // => true
'realName' in hero; // => false

3. Comparing with undefined:
hero.name;     // => 'Batman'
hero.realName; // => undefined


* The concat() method concatenates (joins) two or more arrays.
const hege = ["Cecilie", "Lone"];
const stale = ["Emil", "Tobias", "Linus"];
const children = hege.concat(stale); // Cecilie,Lone,Emil,Tobias,Linus

* The map() method creates a new array with the results of calling a function for every array element.
const numbers = [4, 9, 16, 25];
const newArr = numbers.map(Math.sqrt)

* What is reduce () in JavaScript?
The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.
const numbers = [15.5, 2.3, 1.1, 4.7];
document.getElementById("demo").innerHTML = numbers.reduce(getSum, 0);

function getSum(total, num) {
  return total + Math.round(num);
}


* The sort() method sorts the elements of an array.
Example: Sort numbers in an array in descending order:

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b-a});


* javascript delete element from array of objects
const people = [
  { id: 1, name: 'serdar' },
  { id: 5, name: 'alex' },
  { id: 300, name: 'brittany' }
];

const idToRemove = 5;

const filteredPeople = people.filter((item) => item.id !== idToRemove);

// [
//   { id: 1, name: 'serdar' },
//   { id: 300, name: 'brittany' }
// ]

(OR)

const apps = [
  {id:1, name:'Jon'}, 
  {id:2, name:'Dave'},
  {id:3, name:'Joe'}
]

//remove item with id=2
const itemToBeRemoved = {id:2, name:'Dave'}

apps.splice(apps.findIndex(a => a.id === itemToBeRemoved.id) , 1)

//print result
console.log(apps)



* Do NOT use the delete operator on Arrays. delete will not remove an entry from an Array, it will simply replace it with undefined.

var arr = [0,1,2];
delete arr[1];
// [0, undefined, 2]

* console.log(a, b, c);
abc();
var a = 1;
let b = 2;
const c = 3;

function abc(){
  alert();
}

Output: 1, undefined, undefined
Note: Alert won't show up

* abc();
console.log(a, b, c);
var a = 1;
let b = 2;
const c = 3;

function abc(){
  alert();
}

Output: Only alert shows up


* call, apply, and bind methods?
JavaScript also provides some special methods and properties to every function object. So every function in JavaScript inherits those methods. Call, bind, and apply are some of the methods that every function inherits.


* let string = 'this is a string of words';
let arrayOfStrings = string.split(' ');

let newArray = [];

for(let i=0; i < arrayOfStrings.length; i++){
    let singleArray = arrayOfStrings[i].split('').reverse().join('');
    newArray.push(singleArray);


    let singleArray = arrayOfStrings[i].split('').reverse().join('');
}

newArray.join(' '); // "siht si a gnirts fo sdrow"


* var a = 1;
  console.log('1-> ', a); // 1
function func(){
  console.log('2-> ', a); // undefined
  var a = 2;
  console.log('3-> ', a); // 2
}
  console.log('4-> ', a); // 1

func();
  console.log('5-> ', a); // 1



* for(var i=0 ; i<3 ; i++){
console.log(i , 'for')
setTimeout(()=>{
   console.log(i);
} , 1000);
}
Note: make VAR to LET

* 











* Basic rules worth remembering:
  -> “this” always refers to an object.
  -> “this” refers to an object which calls the function it contains.
  -> In the global context, “this” refers to either window object or is undefined if the ‘strict mode’ is used.













*************************************** Askable Q's ***********************************************
* What ES6 features?
* What are higher-order methods? explain them?
* Diff B/W for-in & for-of?
*** Diff B/W const, let, and var?
https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/
* What is Hoisting? -> https://www.youtube.com/watch?v=Fnlnw8uY6jo
* OOPS concepts?
* What is closure?
  Closure is explained very well here --> https://www.tutorialsteacher.com/javascript/closure-in-javascript
* What is lamda function?
* Difference between substr() and substring()?
* What is the difference between 'freeze' and 'seal' in JavaScript ?
* Diff B/W normal func & Arrow func?
* What is prototype?
  Prototype is explained very well here --> https://www.tutorialsteacher.com/javascript/prototype-in-javascript

* Explain call, apply, and bind methods?
https://www.youtube.com/watch?v=75W8UPQ5l7k --> call, apply and bind method in JavaScript
https://blog.bitsrc.io/understanding-call-bind-and-apply-methods-in-javascript-33dbf3217be#8262
https://www.freecodecamp.org/news/how-to-use-the-apply-call-and-bind-methods-in-javascript-80a8e6096a90/
https://www.codingame.com/playgrounds/9799/learn-solve-call-apply-and-bind-methods-in-javascript

*** How JavaScript Works 🔥& Execution Context | Namaste JavaScript Ep.1
https://www.youtube.com/watch?v=ZvbzSrg0afE&list=RDCMUC3N9i_KvKZYP4F84FPIzgPQ&start_radio=1&rv=ZvbzSrg0afE&t=10

***** Asynchronous JavaScript & EVENT LOOP from scratch
https://www.youtube.com/watch?v=8zKuNo4ay8E

* What is function currying in JavaScript?

***** https://www.w3schools.com/react/react_es6.asp

* https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind

* What is the difference between 'null' and 'undefined' in JavaScript?
https://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript

* Difference between 'forEach' and 'for loop' in Javascript
https://www.geeksforgeeks.org/difference-between-foreach-and-for-loop-in-javascript/
https://alligator.io/js/foreach-vs-for-loops/

* JavaScript: Promises or async-await
https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789


* Javascript binary search
https://stackabuse.com/binary-search-in-javascript/

* Coding challenges
https://www.fullstacktutorials.com/interviews/javascript-coding-questions-answers-6.html

*************************************** useful links ***********************************************
* https://www.geeksforgeeks.org/javascript-interview-questions-and-answers
* https://www.youtube.com/watch?v=jpFNwuwr7o4 --> JavaScript interview question in Hindi # sort function with array
* https://www.freecodecamp.org/news/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb/
* https://www.geeksforgeeks.org/what-is-the-difference-between-freeze-and-seal-in-javascript/
*** https://www.tutorialstonight.com/js/javascript-star-pattern.php
*** https://www.tutorialstonight.com/number-pattern-programs-in-javascript.php
* 



