* 'var' and 'let' are both used for variable declaration in javascript but the difference between them is that 'var' is function scoped and 'let' is block scoped.

* A closure gives you access to an outer function's scope from an inner function.

* Both 'freeze' and 'seal' are used to create non extensible objects in JavaScript, but there are plenty of differences between them. Object.seal() allows changes to the existing properties of an object whereas Object.freeze() does not allow so. Object.freeze() makes an object immute to everything even little changes cannot be made. Object.seal() prevents from deletion of existing properties but cannot prevent them from external changes.

* The prototype is an object that is associated with every functions and objects by default in JavaScript, where function's prototype property is accessible and modifiable and object's prototype property (aka attribute) is not visible.
FMD --> https://www.tutorialsteacher.com/javascript/prototype-in-javascript

* Hoisting: In JavaScript, variable and function names can be used before declaring it. The JavaScript compiler moves all the declarations of variables and functions at the top so that there will not be any error. This is called hoisting.
Points to Remember :
	-> JavaScript compiler moves variables and function declaration to the top and this is called hoisting.
	-> Only variable declarations move to the top, not the initialization.
	-> Functions definition moves first before variables.
FMD --> https://www.tutorialsteacher.com/javascript/javascript-hoisting

Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.

Just like  var, let declarations are hoisted to the top. Unlike var which is initialized as undefined, the let keyword is not initialized. So if you try to use a let variable before declaration, you'll get a Reference Error.

Hoisting of const
Just like let, const declarations are hoisted to the top but are not initialized.

So just in case you missed the differences, here they are:
  -> var declarations are globally scoped or function scoped while let and const are block scoped.
  -> var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.
  -> They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized.
  -> While var and let can be declared without being initialized, const must be initialized during declaration.

* var, let, const
VAR: variables declared using VAR keyword can be re-declared & updated.
  var greeter = "hey hi";
  var times = 4;

  if (times > 3) {
      var greeter = "say Hello instead"; 
  }

  console.log(greeter) // "say Hello instead"

LET: variables declared using LET keyword can not be re-declared but updated.
  let greeting = "say Hi";
  let times = 4;

  if (times > 3) {
      let hello = "say Hello instead";
      console.log(hello);// "say Hello instead"
  }
  console.log(hello) // hello is not defined
  ******
  let greeting = "say Hi";
  let greeting = "say Hello instead"; // error: Identifier 'greeting' has already been declared
  ******
  let greeting = "say Hi";
  if (true) {
      let greeting = "say Hello instead";
      console.log(greeting); // "say Hello instead"
  }
  console.log(greeting); // "say Hi"

CONST: Like let declarations, const declarations can only be accessed within the block they were declared. const cannot be updated or re-declared. This means that the value of a variable declared with const remains the same within its scope. It cannot be updated or re-declared. So if we declare a variable with const, we can neither do this:

  const greeting = "say Hi";
  greeting = "say Hello instead";// error: Assignment to constant variable. 
  *******
  const greeting = "say Hi";
  const greeting = "say Hello instead";// error: Identifier 'greeting' has already been declared
  *******
  This behavior is somehow different when it comes to objects declared with const. While a const object cannot be updated, the properties of this objects can be updated. Therefore, if we declare a const object as this:
  const greeting = {
      message: "say Hi",
      times: 4
  }
  while we cannot do this:
  greeting = {
      words: "Hello",
      number: "five"
  } // error:  Assignment to constant variable.
  we can do this:
  greeting.message = "say Hello instead";







* Eval: eval() is a global function in JavaScript that evaluates a specified string as JavaScript code and executes it.

* Try - catch - finally
FMD --> https://www.tutorialsteacher.com/javascript/javascript-error-handling

* Scopes: FMD --> https://www.tutorialsteacher.com/javascript/scope-in-javascript

* Promise
A Promise handles a single event when an async operation completes or fails.

* Promise:
var promise = new Promise(function(resolve, reject) { 
    resolve('Geeks For Geeks'); 
}) 
  
	promise 
		.then(function(successMessage) { 
		   //success handler function is invoked 
		    console.log(successMessage); 
		}, function(errorMessage) { 
		    console.log(errorMessage); 
		});

* Unique properties from array of object
const data = [
  { group: 'A', name: 'SD' }, 
  { group: 'B', name: 'FI' }, 
  { group: 'A', name: 'MM' },
  { group: 'B', name: 'CO'}
];
const unique = [...new Set(data.map(item => item.group))]; // [ 'A', 'B']

* let number = 5;
let currentLoopIs = number;

let finalOutput = 1;

function doAction(getNumber) {
  if (currentLoopIs) {
    finalOutput = finalOutput * currentLoopIs;
    currentLoopIs = --getNumber;
    doAction(currentLoopIs);
  }
}

doAction(number);

console.log(finalOutput);


* let mainArray = [0, 1];
let loopCount = 10;

function doAction () {
  let one = mainArray[mainArray.length - 2];
  let two = mainArray[mainArray.length - 1];

  let add = one + two;

  mainArray.push(add);
};

for (let i = 0; i <= loopCount; i++) {
  doAction();
}

console.log(mainArray);



* Closure example
function Counter() {
    var counter = 0;

    function IncreaseCounter() {
        return counter += 1;
    };

    return IncreaseCounter;
}

var counter = Counter();
alert(counter()); // 1
alert(counter()); // 2
alert(counter()); // 3
alert(counter()); // 4

* With arrow functions there are no binding of this.

* Call invokes the function and allows you to pass in arguments one by one. Apply invokes the function and allows you to pass in arguments as an array. Bind returns a new function, allowing you to pass in a this array and any number of arguments.


* What is the difference between null and undefined in JavaScript?
In JavaScript, undefined means a variable has been declared but has not yet been assigned a value, such as:

var testVar;
alert(testVar); //shows undefined
alert(typeof testVar); //shows undefined
null is an assignment value. It can be assigned to a variable as a representation of no value:

var testVar = null;
alert(testVar); //shows null
alert(typeof testVar); //shows object
From the preceding examples, it is clear that undefined and null are two distinct types: undefined is a type itself (undefined) while null is an object.

null === undefined // false
null == undefined // true
null === null // true


* Difference for..in and for..of:
Both for..in and for..of are looping constructs which are used to iterate over data structures. The only difference between them is the entities they iterate over:

for..in iterates over all enumerable property keys of an object
for..of iterates over the values of an iterable object. Examples of iterable objects are arrays, strings, and NodeLists.

Example:
let arr = ['el1', 'el2', 'el3'];

arr.addedProp = 'arrProp';

// elKey are the property keys
for (let elKey in arr) {
  console.log(elKey);
}

// elValue are the property values
for (let elValue of arr) {
  console.log(elValue)
}


* Difference between foreach and map
map() returns a new array while . forEach() doesn't. That is why you see that difference in the output. . forEach() just operates on every value in the array.

* For loop: The JavaScript for loop is used to iterate through the array or the elements for a specified number of times.

* Difference between forEach and for loop in Javascript
For Loop: It is one of the original ways of iterating over an array. It is faster in performance.The break statement can be used to come out from the loop. 
  for (let i = 0; i < foodArray.length; i++) {
    if (foodArray[i].name === 'Pizza') {
      console.log('I LOVE PIZZA');
      break;
    }
  }

forEach Loop: It is a newer way with lesser code to iterate over an array. It is slower than the traditional loop in performance. The break statement cannot be used because of the callback function. forEach keeps the variableâ€™s scope to the block.
  const num = 4;
  const arr = [0, 1, 2];

  arr.forEach(num => {
    console.log(num);
  });

  // Result:
  // 0
  // 1
  // 2
  console.log(num);

  // Result:
  // 4


* 














*************************************** Askable Q's ***********************************************
* What ES6 features?
* What are higher-order methods? explain them?
* Diff B/W for-in & for-of?
*** Diff B/W const, let, and var?
https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/

* OOPS concepts?
* What is closure?
  Closure is explained very well here --> https://www.tutorialsteacher.com/javascript/closure-in-javascript
* What is lamda function?
* Difference between substr() and substring()?
* What is the difference between freeze and seal in JavaScript ?
* Diff B/W normal func & Arrow func?
* What is prototype?
  Prototype is explained very well here --> https://www.tutorialsteacher.com/javascript/prototype-in-javascript

* Explain call, apply, and bind methods?

***** https://www.w3schools.com/react/react_es6.asp

* https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind

* What is the difference between null and undefined in JavaScript?
https://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript

* Difference between forEach and for loop in Javascript
https://www.geeksforgeeks.org/difference-between-foreach-and-for-loop-in-javascript/
https://alligator.io/js/foreach-vs-for-loops/

*************************************** useful links ***********************************************
* https://www.geeksforgeeks.org/javascript-interview-questions-and-answers
* https://www.youtube.com/watch?v=jpFNwuwr7o4 --> JavaScript interview question in Hindi # sort function with array
* https://www.freecodecamp.org/news/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb/
* https://www.geeksforgeeks.org/what-is-the-difference-between-freeze-and-seal-in-javascript/
* 



