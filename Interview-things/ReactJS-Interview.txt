* React is an open-source JavaScript library created by Facebook for building complex, interactive UIs in web and mobile applications.

* React is a small library focused on building UI components
* React is a JavaScript library for building user interfaces.
* React is used to build single page applications.
* React allows us to create reusable UI components.

Sample code:
	import React from 'react';
	import ReactDOM from 'react-dom';

	class Test extends React.Component {
	  render() {
	    return <h1>Hello World!</h1>;
	  }
	}

	ReactDOM.render(<Test />, document.getElementById('root'));


* JSX is a shorthand for JavaScript XML.

* When Facebook first released React to the world, they also introduced a new dialect of JavaScript called JSX that embeds raw HTML templates inside JavaScript code. JSX code by itself cannot be read by the browser; it must be transpiled into traditional JavaScript using tools like Babel and webpack.

* How does React Work?
React creates a VIRTUAL DOM in memory.
Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.


* React components has a built-in state object. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders.

* The main difference between state and props is that props are immutable. This is why the container component should define the state that can be updated and changed, while the child components should only pass data from the state using props.

* In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself. To write an uncontrolled component, instead of writing an event handler for every state update, you can use a ref to get form values from the DOM.

* Webpack is a popular module bundling system built on top of Node Js. It can handle not only combination and minification of JavaScript and CSS files, but also other assets such as image files (spriting) through the use of plugins.

* Babel is a JavaScript compiler
Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.




Ex: class MyComponent extends React.Component {
	  render() {
	    let props = this.props;

	    return (
	      <div className="my-component">
	        <a href={props.url}>{props.name}</a>
	      </div>
	    );
	  }
	}

* Lifecycle of Components:
	* The three phases are: Mounting, Updating, and Unmounting.
	* Mounting:
		-> constructor()
		-> getDerivedStateFromProps()
		-> render()
		-> componentDidMount()
	* Updating
		-> getDerivedStateFromProps()
		-> shouldComponentUpdate()
		-> render()
		-> getSnapshotBeforeUpdate()
		-> componentDidUpdate()
	* Unmounting
		-> componentWillUnmount()

* 

* What is HOC?
	Concretely, a higher-order component is a function that takes a component and returns a new component.

* State is a JavaScript object that stores a component's dynamic data and determines the component's behaviour. Because state is dynamic, it enables a component to keep track of changing information in between renders and for it to be dynamic and interactive. State can only be used within a class component.

* Pure Components restricts Re-Rendering

* Virtual DOM is any kind of representation of a real DOM. Virtual DOM is about avoiding unnecessary changes to the DOM, which are expensive performance-wise, because changes to the DOM usually cause re-rendering of the page. It allows to collect several changes to be applied at once, so not every single change causes a re-render, but instead re-rendering only happens once after a set of changes was applied to the DOM.

* Shadow DOM is mostly about encapsulation of the implementation. A single custom element can implement more-or-less complex logic combined with more- or-less complex DOM. Shadow DOM refers to the ability of the browser to include a subtree of DOM elements into the rendering of a document, but not into the main document DOM tree.

* What diff b/w axios and fetch
axios handles xsrf attacks, fetch doesn't
axios stringifies returned data and we can use it directly. in fetch, we need to convert into json.
-> Cross-site request forgery:- Cross-site request forgery, also known as one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website where unauthorized commands are submitted from a user that the web application trusts.

* 

* The ‘switch’ keyword is used when you want to display only a single route to be rendered amongst the several defined routes. The <switch> tag when in use matches the typed URL with the defined routes in sequential order. When the first match is found, it renders the specified route. Thereby bypassing the remaining routes.

* 

* At the highest level, React components have lifecycle events that fall into three general categories:
	1) Initialization
		-> getInitialstate()
		-> getDefaultProps()
		-> componentWillMount()
		-> render()
		-> componentDidMount()
	2) State/Property Updates
		-> componentWillReceiveProps()
		-> shouldComponentUpdate()
		-> componentWillUpdate()
		-> render()
		-> componentDidUpdate()
	3) Destruction
		-> componentWillUnmount()

* Some of the most important lifecycle methods are:

	-> componentWillMount() – Executed just before rendering takes place both on the client as well as 		server-side.
	-> componentDidMount() – Executed on the client side only after the first render.
	-> componentWillReceiveProps() – Invoked as soon as the props are received from the parent class and 	before another render is called.
	-> shouldComponentUpdate() – Returns true or false value based on certain conditions. If you want your 		component to update, return true else return false. By default, it returns false.
	-> componentWillUpdate() – Called just before rendering takes place in the DOM.
	-> componentDidUpdate() – Called immediately after rendering takes place.
	-> componentWillUnmount() – Called after the component is unmounted from the DOM. It is used to clear 		up the memory spaces.


* LifeCycle-hooks
	-> componentDidMount() = when the component is added to the DOM
	-> componentWillUnmount() = when the component is removed from the DOM



* Lifecycle of Components
Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.
The three phases are: Mounting, Updating, and Unmounting.
	-> Mounting
		constructor()
		getDerivedStateFromProps()
		render()
		componentDidMount()
	-> Updating
		getDerivedStateFromProps()
		shouldComponentUpdate()
		render()
		getSnapshotBeforeUpdate()
		componentDidUpdate()
	-> Unmounting
		componentWillUnmount()

* What is a pure component?
Pure Components in React are the components which do not re-renders when the value of state and props has been updated with the same values. If the value of the previous state or props and the new state or props is the same, the component is not re-rendered.

* 




************************************ Askable Interview Q's ********************************************
* What is current React JS version?
* What is 'Context API' & write sample connection?
* What is 'Redux' & write sample connection?
* What is 'Ref'?
* What is a 'Higher order component'?
* what is webpack in react js?
* what is babel in react js?


*** https://www.w3schools.com/react/default.asp

*************************************** useful links **************************************************
* https://www.edureka.co/blog/interview-questions/react-interview-questions/
* https://www.codementor.io/blog/5-essential-reactjs-interview-questions-du1084ym1
* https://nimbusweb.me/s/share/4500249/s63v81s0f102d0zg382y


