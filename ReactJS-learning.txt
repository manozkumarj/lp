* React is a Javascript library which is developed by Facebook in 2011 & is used to create fast and interactive user interfaces.
* Every React app will contain at least one main component which we refer to 'root' component.
* Every React app is essentially a tree of components.
* Each component is a pieace of UI.
* In terms of implementation a component is implemeted as a javascript class that has some "state" and a "render" method.
* class Tweet {
	state = {};
	render() {
		return <h1>Hello world</h1>
	}
}

* Here the "state" is the data that we want to display when the component is render.
* And the "render" method is responsible for discribing what the UI should look like.
* React = React to state changes. Because when the state changes React essentially reacts to the state change and updates the DOM.
* Both Angular & React are similar in terms of their component based architecture, However Angular is a Framework and a complete solution while React is library.
* 


* To create React app, first we need to install react globally with below command
	-> npm i -g create-react-app
* To know globally installed react-app version use below command
	-> create-react-app --version
* Now use below command to create react app.
	-> create-react-app [app name]
* By default the above command installs
	Development server, Webpack, Babel and other few libraries we need.
* 'Babel' is a "Modern Javascript Compier" and is used to compile our javascript code.
* 'Babel' takes 'jsx' syntax and converts it to plain javascript that browser can understand.
* By default we get below folders
	node_modules, public & src
* By default we get below files
	.gitignore, packet.json, packet-lock.json & README.md
* Index.html file will reside in 'public' folder
* In React we have .jsx which stands for "Javascript XML"
* React contains "Hot Module Reloading" feature in-built.
* To use "bootstrap" in react app, first we need to install it using below command
	-> npm i bootstrap@latest
	then we need to import bootstrap in 'index.js' file as below
	-> import 'boorstrap/dist/css/bootstrap.css';
	If the above path doesn't work then use below path
	-> import "../node_modules/bootstrap/dist/css/bootstrap.min.css";

* 'React' module will call "React.createElement" internally.
* "React.Fragment" element can be used to ommit wrapper div inside of 'render' method.
Ex: class Counter extends Component {
		state = {
			count: 0
		}
		render () {
			return (
				<React.Fragment>
					<span> { this.state.count } </span>
					<button> Increament </button>
				</React.Fragment>
			);
		}
	}

* 'state' is a special property in react components, basically it's an object which includes any data that this component needs.
*  'JSX' are just like normal javascript objects. We can return them from a function, we can pass them to a function. We can also use then as constant OR a variable.

* Setting an attribute to an element
	state = {
		count: 0,
		imageUrl: 'http://picsum.photos.com/200'
	}
	<img src={this.state.imageUrl} alt="" />
* If we want apply any classes on element then we need to use "className" but not "class".
And we need to use "style" attribute as below.
Note: We should follow "camelCase" notation for "class"es and for "css attributes" as below.

Ex: class Counter extends Component {
		state = {
			count: 0
		}
		styles = {
			fontSize: 10,
			fontWeight: "bold"
		}
		render () {
			return (
					<div>
						<span style = { this.styles } className="btn btin-primary m-2">{this.formatCount()}</span>
						<button>Increment</button>
					</div>
				)
		}

		formatCount(){
			let { count } = this.state;
			return if(count === 0) ? 'Zero' : count;
		}
	}
	export default Counter;

* We can also use in-line styles as below
Ex: <span style = {{fontSize: 30}} className="btn btin-primary m-2">{this.formatCount}</span>

* Rendering classes dynamically
Ex: render() {
		let classes = "badge m-2 badge-";
		classes += (this.state.count === 0) ? "warning" : "primary";

			return ( <span className={classes}>{this.formatCount}</span> );
	}

Note: Did you notice that we didn't use 'this' keyword while calling "classes" class name? It's because that "classes" variable is declared inside of "render" method.


* Always use descriptive names that determine the intension of your code.

* 






React commands:
------------------------------------------------------------------
* npm i -g create-react-app
* create-react [app name] | npx create-react [app name] .
* npm start   --> This will start our dev server on port 3000 by default
* 






Other:
------------------------------------------------------------------------
* "Ayu Mirage" is the theme Mosh is using.