* Vue is a frontend Javascript framework for building websites & user inerfaces
* Initial release in Feb 2014
* Vue runs on default port 8080
* File extension is '.vue'
* Vue is popular with Node.Js & Express (MEVN Stack)
* Vue can also run on the server-side by using SSR framework like Nuxt
* Vue uses virtual DOM
* Vue components include a template for markup, logic including any state/data/methods as well as the styling for that component.
Sample Vue component code is below

	<template>
		<header>
			<title>{{title}}</title>
		</header>
	</template>

	<script>
		export default {
			props: {
				title: String,
			},
		}
	</script>

	<style lang="stylus" scoped>
		header{
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 20px;
		}
	</style>

Note: if we keep 'scoped' in 'style' atrribute, it means all the styles are only applicable to this coponent level only.


* Components can have their own state which can determine how a specific component behaves and what data is displayed.
* Some state may be local to a specific component and some may be 'global' or 'app' level state that needs to be shared with multiple components.
* 'Vuex' is a state manager for global state in larger applications
* Options API & Composition API
* Vue cli is standard toolong for Vue.js development
* if we don't define the props which a component is receiving from parent component, then those props are considered as 'Non-props data'


* If we don't use Vuex for state management then we may encounter 'Prop drilling' flow.

* v-bind:src, v-bind:alt directives can be used for image tag
<img v-bind:src="picture" v-bind:alt="`${firstName} ${lastName}`"> OR
<img :src="picture" :alt="`${firstName} ${lastName}`">


****************************************** IMP points ******************************************
* H1-H6 tags can't be used inside of <p> tag
* 'this.$el' refers to the entire HTML part of that component
* 'this.$route' gives the current page path
* 'this.$route.params' gives all the params from current URL
* 'v-bind="$attrs"' - it contains non-props data
Note: if we don't define the props which a component is receiving from parent component, then those props are considered as 'Non-props data'

* '$store.state' -> with this we can access global store/state of the App
* 



****************************************** Packages & Imports *****************************************
* axios, vue-axios, vue-router
* npm install vuex@next


* import Vue from 'vue';
* import VueAxios from 'vue-axios';
* import axios from 'axios';
Vue.use(VueAxios, axios);

* 


****************************************** VScode Extentions ******************************************
* Vetur - by Pine Wu




****************************************** Routing ******************************************
* Normal routing example - from main.js file
import Vue from 'vue';
import VueRouter from 'vue-router';
import Home from './components/Home';
import About from './components/About';
import Settings from './components/Settings';
import Users from './components/Users';
import User from './components/User';
import PageNotFound from './components/PageNotFound';
Vue.use(VueRouter);
const routes = [
	{path: '/', component: Home},
	{path: '/about', component: About},
	{path: '/settings', component: Settings},
	{path: '/users', component: Users},
	{path: '/user/:id', component: User},
	{path: '*', component: PageNotFound},
];
const router = new VueRouter({
	routes
});
new Vue({
	router: router,
	render: h => h(App),
}).$mount('#app');

&& In App.vue page
<template>
	<div id="app">
		<ul>
			<li><router-link to="/"> Home </li>
			<li><router-link to="/about"> About </li>
			<li><router-link to="/settings"> Settings </li>
			<li><router-link to="/users"> Users </li>
		</ul>
		<router-view></router-view>
	</div>
</template>

&& In Users.vue page
<template>
	<div>
		<h1>Users</h1>
		<p><router-link to="user/1"> Manoj </p>
		<p><router-link to="user/2"> Mahesh </p>
		<p><router-link to="user/3"> Kranthi </p>
	</div>
</template>

&& In User.vue page
<template>
	<div>
		<h1>User component</h1>
		<p>User ID is {{userId}}</p>
	</div>
</template>

<script>
	export default {
		name: 'User',
		data(){
			return {
				userId: this.$route.params.id
			}
		}
	}
</script>


****************************************** Props in Script area ******************************************
* name
* props: { msg: String, title: { type: String, default: 'Default title' } }
* data(): { return { show: true, users: [ {id: 1, name: 'Manoj'}, {id: 2, name: 'Mahesh'} ] } }
* methods: { display(): { this.show = !this.show } }
* components: { Header, Footer, 'home': Home }
* All lifecycle hooks
* inheritAttrs: false
* computed: { getResult() { return (100*70)-10; } }
* watch: { count(val, prevVal) { alert("value changed"); } }
* emits: ['delete-task'];


****************************************** Directives ******************************************
* v-bind:src || :src
* v-bind:alt || :alt
* v-on:click || @click
Ex: <button v-on:click="submit">Submit</button> || <button @click="submit()">Submit</button>

* v-show

* v-if="show"
	v-else
	Ex: <h1 v-if="show">Show title</h1>
		<h1 v-else>Hide title</h1>

* v-for
	<tr v-for="(user, index) in users" :key="index">
		<td>{{user.id}}</td>
		<td>{{user.name}}</td>
	</tr>

* v-once --> it makes the value constant, means it can't be changed again
<h3 v-once>{{name}}</h3>

* <p v-html="rowHtml"></p>

* <component v-bind:is="cmp"></component>

* v-bind
<button v-bind:disabled="isDisabled">Click</button>

* <h1 v-bind:style="{color: 'blue'}">Style binding</h1>

* <h1 v-bind:class="{bgClrCls: true, clrCls: false}">class binding</h1>

* v-model --> it is like two way data binding
Ex1: <input type="text" v-model="inputValue" />
Ex2: <h1 style="white-space:pre-line">{{inputValue}}</h1>
<textarea v-model="inputValue" />

* Props from child to parent component
CHILD Comp:
<template>
	<div>
		<button v-on:click="updateTitle">Change Title</button>
	</div>
</template>

<script>
	export default {
		name: 'Child',
		methods: {
			updateTitle() {
				this.$emit("changeTitle", "Parent title Updated")
			}
		}
	}
</script>

PARENT Comp:
<template>
	<div>
		<h1>{{title}}</h1>
		<Child v-on:changeTitle="updateTitle($event)" />
	</div>
</template>

<script>
	import Child from './components/Child';
	export default {
		name: 'Child',
		data() {
			retun {
				title: "Parent Title"
			},
		},
		methods: {
			updateTitle(title) {
				this.title = title;
			}
		}
	}
</script>


* v-pre
* v-show
* v-cloak
* v-slot:header


**************************************** Useful code samples ****************************************
* Form with validations
<template>
	<div>
		<p v-if="error.length">
			<b> Please correct following errors </b>
			<ul>
				<li v-for="e in errors" :key="e"> {{e}} </li>
			</ul>
		</p>
		<form @submit="login" method="post">
			<input type="text" placeholder="Enter name" v-model="name" /><br>
			<input type="password" placeholder="Enter password" v-model="password" /><br>
			<button type="submit">Login</button>
		</form>
	</div>
</template>

<script>
	export default {
		name: 'Login',
		data(){
			return {
				errors: [],
				name: null,
				password: null,
			}
		}
		methods: {
			login(e) {
				e.preventDefault();
				this.errors = [];
				console.log("Submitted");
				if(this.name && this.password){
					console.log("No errors");
				}
				if(!this.name){
					this.errors.push("Username is required");
				}
				if(!this.password){
					this.errors.push("password is required");
				}
			}
		}
	}
</script>


* Filters
Filters will be declared in main.js file
Ex1: Vue.filter('uCase', function(string){
	return string.toUpperCase();
});


* API call
<template>
	<div>
		<h1>Employees list</h1>
			<table border="1px">
				<tr>
					<td>Name</td>
					<td>Salary</td>
					<td>Age</td>
				</tr>
				<tr v-for="item in list" :key="item.id">
					<td> {{item.employee_name}} </td>
					<td> {{item.employee_salary}} </td>
					<td> {{item.employee_age}} </td>
				</tr>
				<li> {{e}} </li>
			</table>
	</div>
</template>

<script>
	import Vue from 'vue';
	import VueAxios from 'vue-axios';
	import axios from 'axios';
	Vue.use(VueAxios, axios);
	export default {
		name: 'EmployeesList',
		data(){
			return {
				list: [],
			}
		},
		mounted(){
			Vue.axios.get('http://dummy.restapiexample.com/api/v1/employees')
				.then(res => {
					console.log(res.data.data);
					this.list = res.data.data;
				});
		}
	}
</script>


* Dynamic component
<template>
	<h1>Dynamic Component</h1>
	<button @click="tab='java'">Load Java</button>
	<button @click="tab='node'">Load Node</button>
	<button @click="tab='php'">Load PHP</button>

	<component :is="tab" />
</template>

<script>
	import Java from './components/Java';
	import Node from './components/Node';
	import Php from './components/Php';
	export default {
		name: 'Home',
		components: { Java, Node, Php },
		data(){
			return {
				tab: 'java',
			}
		}
	}
</script>




****************************************** Lifecycle hooks ******************************************
* beforeCreate:function(){}
* created:function(){}
* beforeMount:function(){ console.log(this.$el); }
* mounted:function(){ console.log(this.$el); }
* beforeUpdate:function(){}
* updated:function(){}
* beforeDestroy:function(){}
* destroyed:function(){}



****************************************** Methods *************************************************
* v-on:click
* v-on:mouseover
<button v-on:click="hello('Alert hello')">Click</button>


****************************************** Useful commands ******************************************
* npm install -g @vue/cli (OR) yarn global add @vue/cli
* vue --version || vue -V ((Note it's CAPITAL -V))
* vue create [project-name] || vue ui
* npm run serve || npm serve
* 

****************************************** Concepts ***********************************************
* Lifecycle hooks
* Filters
* Dynamic component using component tag
* Custom directives
Ex: <h1 v-size>Custom Directives in VueJs</h1>
Custom directives will be declared in main.js file
Ex1: Vue.directive('size', {
		bind(el){
			el.style.fontSize = '60px'
		}
	});

Ex: <h1 v-size="small">Custom Directives in VueJs</h1>
Ex2: Vue.directive('size', {
		bind(el, binding, vnode){
			if(binding.value == 'small'){
				el.style.fontSize = '20px'
			}
			else if(binding.value == 'bib'){
				el.style.fontSize = '100px'
			}
			else {
				el.style.fontSize = '60px'
			}
		}
	});


* Non-props data
* Computed props
* slots
* Teleport component --> Using teleport component we can show some html content out sode of 'app' ID i.e., outside of Vue app area
Syntax: <teleport to="#footer"><h3>This is footer</h3></teleport>






===================================================== VueX =====================================================
* VueX is official state management library for VueJs
* It's used to share the data across the all components of the App, it's centralized storage data for the App
Vuex Syntax:
new Vuex.Store({
	state: {

	},
	mutations: {

	},
	actions: {

	},
	getters: {

	}
});

* Mutations is the only reccomended wat to change the statein Vuex store, we can change the state directly but it's not reccomended. The main reason is Mutations can track the changes in state which is very useful for debugging purpose in dev tool.

* Lifecycle of Vuex store
	-> Actions
	-> Mutations
	-> State

* Lifecycle flow explanation
	-> The Component dispatches an action OR calls an 'Action', 'Action' is responsible for the business logic & also communicate with backend API
	-> If it needs to change the data then it commits the 'Mutation' and that 'Mutation' track the changes & it also communicate with devtools for debugging purpose
	-> And then that 'Mutation' update the value of 'State'
	-> Since 'State' is reactive, so it will be updated everywhere in the App automatically.

* To use Vuex4 we should be using Vue3

* 'Mutations' shouldn't contain Async actions.
* 'Actions' should only contain Async actions.


****************************************** Imports & Packages ***********************************************
* import Vue from "vue";
* import Vuex, { mapState, mapGetters, mapActions } from 'vuex';



* vuex

=====================================================================================================================

****************************************** Interview Q's ******************************************
* What is VueJs & current version?
* What is computed property?
* What are watchers?
* What are slots?
* Proper way of loading dynamic component?
* What is Teleport component?


****************************************** Vue websites ******************************************
* v3.vuejs.org
* bootstrap-vue.org
* cli.vuejs.org
* NPM vue-axios





