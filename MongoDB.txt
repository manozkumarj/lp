* MongoDB is a document or NoSQL database.
* We use the schema to define the shape of documents in a MongoDB collection.
* __id is a unique identifier of a document
* Mongoose is built on top of MongoDB driver
* 'mlab' is online MongoDB database provider. We can store upto 0.5GB data.
* 'mongodb atlas' is online MongoDB database provider. We can store upto 512MB data.

* We can use .then() next to .save() - But on the other functions we need to use .exec().then()
* 

Possible datatypes:
---------------------------------------
String, Number, Date, Array, Boolean
Array of strings -> [ String ]
Buffer = Is used to store binary data
ObjectID = Used to store unique ID

* likes: [{type: ObjectId, ref: "User"}]

* comments: [
  {
  text: String
  postedBy: { type: ObjectId, ref: "User" },
  created: { type: Date, default: Date.now }
  }]


Arithmetic operators:
---------------------------------------------------
$eq, $neq, $in, $nin, $gt, $gte, $lt, $lte


Logical operators:
---------------------------------------------------
$or, $and


Regular expression:
---------------------------------------------------
User.find({ name: /^manoj/i }) = This will fetch all the documents where name starts with "manoj"
User.find({ name: /kumar$/i }) = This will fetch all the documents where name ends with "kumar"
User.find({ name: /.*manoj.*/i }) = This will fetch all the documents where name contains "manoj"

* Sample Insert Query - 

async function insertUser(){

	const user = new User{
		name: 'manoj',
		age: 25,
		isPublished: true
	}

	const result = await user.save();
	console.log(result);

}


* User.find({ name:'Manoj', isActive: true}); This can also be written as
User.find().and([{ name:'Manoj' }, { isActive: true }]);

* OR - User.find().or([{ name:'Manoj' }, { isActive: true }]);

* Sample select query- 
User.find()
	.and([{ name:'Manoj' }, { isActive: true }, tags: { $in : ['frontend', 'backend'] }])
	.or([{ age: { $gt: 20, $lt: 30 } }, { city: 'jgl' }])
	.limit(10)
	.skip(3)
	.sort([{ name: 1 }, { age: -1 }]) (OR) .sort('name -age')
	.select({ name: 1, email: 1, _id: -1 }); (OR)  .select('name email -_id');

	Above query can also be writter as 

	User.find()
	.and([{ name:'Manoj' }, { isActive: true }])
	.or([{ tags: 'frontend' }, { tags: 'backend' }])
	.or([{ age: { $gt: 20, $lt: 30 } }, { city: 'jgl' }])
	.limit(10)
	.skip(3)
	.sort([{ name: 1 }, { age: -1 }]) (OR) .sort('name -age')
	.select({ name: 1, email: 1, _id: -1 }); (OR)  .select('name email -_id');


* Sample select query- 
User.find()
	.and([{ name:'Manoj' }, { isActive: true }, tags: { $in : ['frontend', 'backend'] }])
	.or([{ age: { $gt: 20, $lt: 30 } }, { city: 'jgl' }])
	.limit(10)
	.skip(3)
	.sort([{ name: 1 }, { age: -1 }])
	.count();


* Sample update query - 
async function updateUser(id){
	
	const user = await Course.findByIdAndUpdate(id,
		$set: {
			author: 'Jack',
			isPublished: true
		}, { new: true }
	);
}

updateUser('546fskjsfkjl485fsjj');


* Sample Delete query - 
async function deleteUser(id){
	
	const user = await Course.deleteOne({_id: id});
}

deleteUser('546fskjsfkjl485fsjj');
















* Aggregation is collection of stages.
Examples of stages: $match, $group, $sort, $project, $count, $limit, $skip, $out

* Aggregation expression refers to the name of the field of input document

* $sum is cumulative operator

* $match
Ex: db.collection.aggregate([
		{ $match : { city : 'Hyderabad' } }

		{ $match : { age : { $gt : 25 } } }

		{ $match : { $and : [ 
			{ gender : "female" }, 
			{ age : { $gt : 25 } } 
		] } }

	]);


https://www.youtube.com/watch?v=dQIXLhKcv5c&list=PLWkguCWKqN9OwcbdYm4nUIXnA2IoXX0LI&index=9

* 

* https://www.youtube.com/watch?v=A3jvoE0jGdE&index=1&list=PLWkguCWKqN9OwcbdYm4nUIXnA2IoXX0LI  -> Introduction to the Aggregation Framework -> 45 Vids

* 



******************************** NodeJS Mongoose Schema dataTypes **********************************
-> 	const mongoose = require("mongoose");
	const {ObjectId} = mongoose.Schema;

* type: String | Number | Date | ObjectId
* trim: true,
* required: true,
* default: Date.now,
* unique: true

* postedBy : {
				type: ObjectId || mongoose.Schema.ObjectId,
				ref: "User" // Collection name
			}





************************************** Mongoose functions ******************************************
* findById(id);
* findOne({ email });
* findById(id).sort({date: -1});
* find().select("_id title body")
* Post.findByIdAndUpdate(req.body.postId, {$push : { likes: req.body.userId }}, {new: true})
* Post.findByIdAndUpdate(req.body.postId, {$pull : { likes: req.body.userId }}, {new: true})
* User.findByIdAndDelete(id);
* findOneAndDelete() returns the deleted document after having deleted it (in case you need its contents after the delete operation);
	-> findOneAndDelete() should be able to delete on _id.
* deleteOne() is used to delete a single document
* remove() is a deprecated function and has been replaced by deleteOne() (to delete a single document) and deleteMany() (to delete multiple documents)
* Post.findByIdAndUpdate(
                req.body.postId,
                { $push: { comments: comment, updated: new Date() } },
                { new: true }
            )
* 














Learnable links:
---------------------------------------------------------------
* https://www.freetutorials.eu/mongodb-the-complete-developers-guide/











---------------------------------------------------------------------------------------------
---------------------------------------- Useful Links ---------------------------------------
* https://stackoverflow.com/questions/20796714/how-do-i-start-mongo-db-from-windows
* https://www.djamware.com/post-sub-category/5845677b80aca7763489d871/mongodb
* https://stackoverflow.com/questions/42715591/mongodb-difference-remove-vs-findoneanddelete-vs-deleteone
